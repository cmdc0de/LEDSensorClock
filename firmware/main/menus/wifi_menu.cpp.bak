#include "wifi_menu.h"
#include "../app.h"
#include "calibration_menu.h"
#include "gui_list_processor.h"
#include <app/display_message_state.h>
#include <esp_log.h>
#include <esp_event.h>
#include <esp_wifi.h>
#include "menu_state.h"
#include <math/rectbbox.h>

using libesp::ErrorType;
using libesp::BaseMenu;
using libesp::XPT2046;
using libesp::Point2Ds;
using libesp::TouchNotification;
using libesp::RGBColor;

static StaticQueue_t InternalQueue;
static uint8_t InternalQueueBuffer[WiFiMenu::QUEUE_SIZE*WiFiMenu::MSG_SIZE] = {0};
const char *WiFiMenu::LOGTAG = "WIFIMENU";
const char *WiFiMenu::MENUHEADER = "SSID                  RSSI  CH";
const char *WiFiMenu::WIFISID = "WIFISID";
const char *WiFiMenu::WIFIPASSWD = "WIFIPASSWD";

static libesp::RectBBox2D BackBV(Point2Ds(35,130), 25, 10);
static libesp::Button BackButton((const char *)"Back", uint16_t(0), &BackBV,RGBColor::BLUE, RGBColor::WHITE);
static libesp::RectBBox2D ConnectBV(Point2Ds(125,130), 25, 10);
static libesp::Button ConnectButton ((const char *)"Connect", uint16_t(1), &ConnectBV,RGBColor::BLUE, RGBColor::WHITE);
static const int8_t NUM_INTERFACE_ITEMS = 2;
static libesp::Widget *InterfaceElements[NUM_INTERFACE_ITEMS] = {&BackButton, &ConnectButton};


void time_sync_cb(struct timeval *tv) {
    ESP_LOGI(WiFiMenu::LOGTAG, "Notification of a time synchronization event");
}

WiFiMenu::WiFiMenu() : AppBaseMenu(), WiFiEventHandler(), InternalQueueHandler(), MyWiFi()
  , NTPTime(), SSID(), Password(), Flags(0), ReTryCount(0), Items()
  , MenuList(MENUHEADER, Items, 0, 0, MyApp::get().getLastCanvasWidthPixel(), MyApp::get().getLastCanvasHeightPixel(), 0, ItemCount)
  , InternalState(INIT)
	, MyLayout(&InterfaceElements[0],NUM_INTERFACE_ITEMS, MyApp::get().getLastCanvasWidthPixel(), MyApp::get().getLastCanvasHeightPixel(), false)
  , IC(&Password[0],Password.size()-1), Keyboard() {

	InternalQueueHandler = xQueueCreateStatic(QUEUE_SIZE,MSG_SIZE,&InternalQueueBuffer[0],&InternalQueue);
	MyLayout.reset();
}


ErrorType WiFiMenu::hasWiFiBeenSetup() {
  char data[64] = {'\0'};
  uint32_t len = sizeof(data);
  ErrorType et = MyApp::get().getNVS().getValue(WIFISID, &data[0],len);
  if(et.ok()) {
    SSID = data;
    et = MyApp::get().getNVS().getValue(WIFIPASSWD, &data[0],len);
    Password = &data[0];
  } else {
    ESP_LOGI(LOGTAG,"failed to load wifisid: %d %s", et.getErrT(), et.toString()); 
  }
  return et;
}

ErrorType WiFiMenu::clearConnectData() {
  ErrorType et = MyApp::get().getNVS().eraseKey(WIFISID);
  if(!et.ok()) {
    ESP_LOGI(LOGTAG,"failed to erase key ssid: %d %s", et.getErrT(), et.toString()); 
  } 
  et = MyApp::get().getNVS().eraseKey(WIFIPASSWD);
  if(!et.ok()) {
    ESP_LOGI(LOGTAG,"failed to erase key password: %d %s", et.getErrT(), et.toString()); 
  }
  return et;
}

ErrorType WiFiMenu::initWiFi() {
  MyWiFi.setWifiEventHandler(this);
  ErrorType et = MyWiFi.init(WIFI_MODE_APSTA);
  if(et.ok()) {
    et = NTPTime.init(MyApp::get().getNVS(),true,time_sync_cb);
  }
  return et;
}

ErrorType WiFiMenu::connect() {
  ErrorType et = MyWiFi.connect(SSID,Password,WIFI_AUTH_OPEN);
  if(et.ok()) {
    Flags|=CONNECTING;
  }
  return et;
}

bool WiFiMenu::isConnected() {
  return (Flags&CONNECTED)!=0;
}


WiFiMenu::~WiFiMenu() {

}

static etl::vector<libesp::WiFiAPRecord,16> ScanResults;

ErrorType WiFiMenu::onInit() {
	MyApp::get().getDisplay().fillScreen(RGBColor::BLACK);
	TouchNotification *pe = nullptr;
	for(int i=0;i<2;i++) {
		if(xQueueReceive(InternalQueueHandler, &pe, 0)) {
			delete pe;
		}
	}
	MyApp::get().getTouch().addObserver(InternalQueueHandler);
  clearListBuffer();
  for(int i=0;i<ItemCount;++i) {
		Items[i].text = getRow(i);
		Items[i].id = i;
		Items[i].setShouldScroll();
	}
 
  ScanResults.clear();
	return ErrorType();
}

void WiFiMenu::startAP() {
  InternalState = START_AP;
}


libesp::BaseMenu::ReturnStateContext WiFiMenu::onRun() {
	BaseMenu *nextState = this;
  //ESP_LOGI(LOGTAG, "CURRENT STATE = %u, size of ScanResults: %u", InternalState, ScanResults.size());

  if(ScanResults.empty()) {
    ESP_LOGI(LOGTAG,"*****************************Scanresutls empty()");
    clearListBuffer();
    MyApp::get().getDisplay().fillScreen(RGBColor::BLACK);
    MenuList.selectedItem=0;//remove selected item
    ErrorType et = MyWiFi.scan(ScanResults,false);
    //ESP_LOGI(LOGTAG,"in vector: %u", ScanResults.size());
    for(uint32_t i = 0;i<ScanResults.size() && i< NumRows;++i) {
      snprintf(getRow(i),AppBaseMenu::RowLength,"%-19.18s  %4d  %3d"
          , ScanResults[i].getSSID().c_str(), ScanResults[i].getRSSI(), ScanResults[i].getPrimary());
    }
    MyApp::get().getGUI().drawList(&MenuList);
    InternalState = SCAN_RESULTS;
    MyWiFi.startAP("esp32Test", "nopassword");
  }


  if(SCAN_RESULTS==InternalState) {
	  bool penUp = false;
    bool hdrHit = false;
    bool pe = processTouch(InternalQueueHandler, MenuList, ItemCount, penUp, hdrHit);
    if(pe && penUp) {
      uint32_t selectedItem = MenuList.selectedItem;
      ESP_LOGI(LOGTAG,"selectItem %u", selectedItem);
      if(hdrHit) {
        nextState = MyApp::get().getMenuState();
      } else {
        InternalState = DISPLAY_SINGLE_SSID;
        MyApp::get().getDisplay().fillScreen(RGBColor::BLACK);
        char rowBuffer[64];
        snprintf(&rowBuffer[0],sizeof(rowBuffer),"SSID:  %-22.21s", ScanResults[selectedItem].getSSID().c_str());
        MyApp::get().getDisplay().drawString(5,10,&rowBuffer[0],RGBColor::WHITE);
        snprintf(&rowBuffer[0],sizeof(rowBuffer),"Auth:  %s",  ScanResults[selectedItem].getAuthModeString());
        MyApp::get().getDisplay().drawString(5,20,&rowBuffer[0],RGBColor::WHITE);
        snprintf(&rowBuffer[0],sizeof(rowBuffer),"RSSI:  %d", static_cast<int32_t>(ScanResults[selectedItem].getRSSI()));
        MyApp::get().getDisplay().drawString(5,30,&rowBuffer[0],RGBColor::WHITE);
        snprintf(&rowBuffer[0],sizeof(rowBuffer),"Channel:  %d", static_cast<int32_t>(ScanResults[selectedItem].getPrimary()));
        MyApp::get().getDisplay().drawString(5,40,&rowBuffer[0],RGBColor::WHITE);
        snprintf(&rowBuffer[0],sizeof(rowBuffer),"Capabilites:  B:%s N:%s G:%s LR:%s"
          ,ScanResults[selectedItem].isWirelessB()?"Y":"N", ScanResults[selectedItem].isWirelessN()?"Y":"N"
          ,ScanResults[selectedItem].isWirelessG()?"Y":"N", ScanResults[selectedItem].isWirelessLR()?"Y":"N");
        MyApp::get().getDisplay().drawString(5,50,&rowBuffer[0],RGBColor::WHITE);
        snprintf(&rowBuffer[0],sizeof(rowBuffer),"Password: ");
        MyApp::get().getDisplay().drawString(5,60,&rowBuffer[0],RGBColor::WHITE);
        MyLayout.draw(&MyApp::get().getDisplay());
        IC.clear();
        Keyboard.init(VirtualKeyBoard::STDKBNames, &IC, 0, MyApp::get().getLastCanvasWidthPixel(), 85 
            , RGBColor::WHITE, RGBColor::BLACK, RGBColor::BLUE);
      }
    } else {
      MyApp::get().getGUI().drawList(&MenuList);
    } 
  } else {
    Point2Ds TouchPosInBuf;
    libesp::Widget *widgetHit = nullptr;
	  TouchNotification *pe = nullptr;
    if(xQueueReceive(InternalQueueHandler, &pe, 0)) {
      Point2Ds screenPoint(pe->getX(),pe->getY());
      TouchPosInBuf = MyApp::get().getCalibrationMenu()->getPickPoint(screenPoint);
      ESP_LOGI(LOGTAG,"TouchPoint: X:%d Y:%d PD:%d", int32_t(TouchPosInBuf.getX()), int32_t(TouchPosInBuf.getY()), pe->isPenDown()?1:0);
      bool penUp = !pe->isPenDown();
      delete pe;
      widgetHit = MyLayout.pick(TouchPosInBuf);
    	if(widgetHit && penUp) {
        ESP_LOGI(LOGTAG, "Widget %s hit\n", widgetHit->getName());
        switch(widgetHit->getWidgetID()) {
        case 0:
          InternalState = INIT;
          ScanResults.clear();
          ESP_LOGI(LOGTAG,"BACK: %u", static_cast<uint32_t>(InternalState));
          break;
        default:
          ESP_LOGI(LOGTAG, "CONNECT ssid: %s  pass: %s", SSID.c_str(), Password.c_str());
          InternalState = INIT; //FOR NOW
          ScanResults.clear();
          break;
        } 
      } else if (penUp) {
        Keyboard.processTouch(TouchPosInBuf);
        char rowBuffer[64];
        snprintf(&rowBuffer[0],sizeof(rowBuffer),"Password: %s", Password.c_str());
        MyApp::get().getDisplay().drawString(5,60,&rowBuffer[0],RGBColor::WHITE);
      } 
    } 
    MyLayout.draw(&MyApp::get().getDisplay());
    Keyboard.process();
  }
	return BaseMenu::ReturnStateContext(nextState);
}

ErrorType WiFiMenu::onShutdown() {
	MyApp::get().getTouch().removeObserver(InternalQueueHandler);
	return ErrorType();
}

// wifi handler
ErrorType WiFiMenu::staStart() {
  ErrorType et;
  //ESP_LOGI(LOGTAG, __PRETTY_FUNCTION__ );
  return et;
}

ErrorType WiFiMenu::staStop() {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  return et;
}

ErrorType WiFiMenu::wifiReady() {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  Flags|=WIFI_READY;
  return et;
}

ErrorType WiFiMenu::apStaConnected(wifi_event_ap_staconnected_t *info) {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  return et;
}

ErrorType WiFiMenu::apStaDisconnected(wifi_event_ap_stadisconnected_t *info) {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  return et;
}

ErrorType WiFiMenu::apStart() {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  return et;
}

ErrorType WiFiMenu::apStop() {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  return et;
}

ErrorType WiFiMenu::staConnected(system_event_sta_connected_t *info) {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  Flags|=CONNECTED;
  Flags=(Flags&~CONNECTING);
  return et;
}

ErrorType WiFiMenu::staDisconnected(system_event_sta_disconnected_t *info) {
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  Flags=(Flags&~(CONNECTED|HAS_IP));
  NTPTime.stop();
  if(++ReTryCount<MAX_RETRY_CONNECT_COUNT) {
    return connect();
  }
  return ErrorType(ErrorType::MAX_RETRIES);
}

ErrorType WiFiMenu::staGotIp(system_event_sta_got_ip_t info) {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  Flags|=HAS_IP;
  ReTryCount = 0;
  NTPTime.start();
  return et;
}

ErrorType WiFiMenu::staScanDone(system_event_sta_scan_done_t *info) {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  Flags|=SCAN_COMPLETE;
  return et;
}

ErrorType WiFiMenu::staAuthChange(system_event_sta_authmode_change_t *info) {
  ErrorType et;
  //ESP_LOGI(LOGTAG,__FUNCTION__);
  return et;
}

